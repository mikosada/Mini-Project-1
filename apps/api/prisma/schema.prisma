generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  events      Event[]
}

model Event {
  id            Int             @id @default(autoincrement())
  name          String
  slug          String          @unique
  price         Int
  time          DateTime        @db.Time
  date          DateTime        @db.Date
  description   String?         @db.Text
  location      String          @db.Text
  type          EventType
  seat          Int             
  status        EventStatus
  categoryId    Int
  createAt      DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  category      Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  transactions  Transaction[]  
  medias        Media[]      
}

model Media {
  id          Int             @id @default(autoincrement())
  type        MediaType       
  typeId      Int
  event       Event           @relation(fields: [typeId], references: [id], onDelete: Cascade)
  url         String?         @db.Text 
  createdAt   DateTime        @default(now())
  updatedAt   DateTime?       @updatedAt
}

enum MediaType {
  EVENT
}


enum EventStatus {
  ACTIVE
  NON_ACTIVE
}

model Transaction {
  id          Int                 @id @default(autoincrement())
  eventId     Int
  event       Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId      Int
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)    
  rating      Float?
  review      String?             @db.Text
  status      TransactionStatus
  createdAt   DateTime            @default(now())
  updatedAt   DateTime?           @updatedAt
}

enum TransactionStatus {
  ONPROSES
  PENDING
  SUCCESS
  CANCELLED
}

model Sample {
  id          Int           @id @default(autoincrement())
  name        String
  code        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
}

enum EventType {
  FREE
  PAID
}


model User {
  id              Int          @id @default(autoincrement())
  username        String 
  email           String       @unique
  password        String
  role            Role         @default(CUSTOMER)
  referral        String
  transactions    Transaction[]
}

enum Role {
  CUSTOMER
  ORGANIZER
}