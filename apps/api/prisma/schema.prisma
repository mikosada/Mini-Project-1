generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  events      Event[]
}

model Event {
  id          Int             @id @default(autoincrement())
  name        String
  slug        String          @unique
  price       Int
  time        DateTime        @db.Time
  date        DateTime        @db.Date
  description String?         @db.Text
  location    String          @db.Text
  type        EventType
  seat        Int             
  status      EventStatus
  categoryId  Int
  createAt    DateTime        @default(now())
  updatedAt   DateTime?       @updatedAt
  category    Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  ratings     Rating[]  
  medias      Media[]      
}

model Media {
  id          Int             @id @default(autoincrement())
  type        MediaType       
  typeId      Int
  event       Event           @relation(fields: [typeId], references: [id])
  url         String?         @db.Text 
  createdAt   DateTime        @default(now())
  updatedAt   DateTime?       @updatedAt
}

enum MediaType {
  EVENT
}


enum EventStatus {
  ACTIVE
  NON_ACTIVE

}

model Checkout {
  id          Int             @id @default(autoincrement())
  eventId     Int
  userId      Int
  status      StatusCheckoutType
  createdAt   DateTime        @default(now())
  updatedAt   DateTime?       @updatedAt
}

enum StatusCheckoutType {
  ONPROSES
  PENDING
  SUCCED
}

model Rating {
  id          Int            @id @default(autoincrement())
  rating      Float                       
  eventId     Int
  event       Event          @relation(fields: [eventId], references: [id])
  userId      Int
  user        User           @relation(fields: [userId], references: [id])    
  createdAt   DateTime       @default(now())
  updatedAt   DateTime?      @updatedAt
}

model Sample {
  id          Int           @id @default(autoincrement())
  name        String
  code        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
}

enum EventType {
  FREE
  PAID
}


model User {
  id         Int          @id @default(autoincrement())
  username   String 
  email      String       @unique
  password   String
  role       Role         @default(CUSTOMER)
  referral   String
  ratings    Rating[]
  wallet     UserWallet?
}

enum Role {
  CUSTOMER
  ORGANIZER
}

model UserWallet {
  id      Int @id @default(autoincrement())
  userId  Int @unique
  user    User @relation(fields: [userId], references: [id])
  point   Int @default(0)
}

model VoucherDiscount {
  id Int @id @default(autoincrement())
  
}